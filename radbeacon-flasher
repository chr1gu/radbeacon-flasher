#!/usr/bin/env ruby
#
# radbeacon-flasher
#
# USAGE
#
# On a mac you should not need to pass any options in to flash the default
# firmware to the beacon. The firmware will be automatically downloaded. Use
# the `-w` option to "watch" for the beacon to be plugged in and continue
# flashing beacon.
#
# For full usage run with `--help` option:
#
#   radbeacon-flasher --help
#
# PREREQUISITES
#
# This script requires both serhex and dfu-util.
#
# serhex can be installed from source:
#   https://github.com/RadiusNetworks/serhex
#
# dfu-util can be found in most package managers:
#   brew install dfu-util         ; # On Mac
#   sudo apt-get install dfu-util ; # On Ubuntu
#
require "ostruct"
require "net/http"
require "uri"
require 'csv'
#
# Default Settings
#
options = OpenStruct.new
options.version = "3.2.3"
options.watch = false
options.port = "/dev/tty.usbmodem1"

################################################################################

require 'fileutils'
require 'net/http'

class FirmwareError < StandardError; end

class FirmwareFile
  DEFAULT_PREFIX = "radbeacon-usb-"
  SIZE=360492

  def initialize(firmware_name)
    @firmware_name = mangle_name(firmware_name)

    @filename = "#{firmware_name}.hex"
    @filepath = File.expand_path "~/.radbeacon/firmware/#{@filename}"
  end

  def mangle_name(firmware_name)

    # handle radbeacon-g shorthand,
    # ex: `radbeacon-flasher --version g-0-2-9`
    if firmware_name =~ /^radbeacon-usb-g-/
      firmware_name.gsub!('usb-g-', 'g-')
    end
    # Replace dots for dashes
    firmware_name.gsub! ".", "-"

    firmware_name
  end
  
  def name
    @firmware_name
  end
  
  
  def path
    fetch unless File.exist? @filepath
    raise FirmwareError, "File size mismatch, may be corrupted" unless valid?
    @filepath
  end

  def valid?
    File.size(@filepath) == SIZE
  end

  def fetch
    puts "Downloading Firmware #{@filename}"
    url = "https://s3.amazonaws.com/downloads.radiusnetworks.com/43D9DC92-4AB7-4C9E-ABF2-EEB3A496EBDF/#{@filename}"
    FileUtils.mkdir_p File.dirname(@filepath)

    uri = URI.parse(url)
    Net::HTTP.start(uri.host, uri.port, use_ssl: uri.scheme == 'https') do |http|
      request = Net::HTTP::Get.new(uri.request_uri)

      response = http.request request # Net::HTTPResponse object
      if(response.code != "200")
        puts "ERROR: Unable to fetch #{url}"
        exit 1
      end
      File.write(@filepath, response.body)
    end
  end
end

class BinaryFile
  SIZE=124928
  TMPDIR="/tmp"

  def initialize(firmware)
    prestripped_name = convert2bin(firmware)
    @filename = strip(prestripped_name)
    @filepath = File.expand_path "#{TMPDIR}/#{@filename}"
  end
  
  def fetch
    puts "Downloading Firmware #{@filename}"
    url = "https://s3.amazonaws.com/downloads.radiusnetworks.com/43D9DC92-4AB7-4C9E-ABF2-EEB3A496EBDF/#{@filename}"
    FileUtils.mkdir_p File.dirname(@filepath)

    uri = URI.parse(url)
    Net::HTTP.start(uri.host, uri.port, use_ssl: uri.scheme == 'https') do |http|
      request = Net::HTTP::Get.new(uri.request_uri)

      response = http.request request # Net::HTTPResponse object
      if(response.code != "200")
        puts "ERROR: Unable to fetch #{url}"
        exit 1
      end
      File.write(@filepath, response.body)
    end
  end
  
  def convert2bin(firmware)
    # convert firmware hex file to bin file
    prestripped_name = firmware.name + "-prestrip.bin"
    precmd = RUBY_PLATFORM.include?("darwin") ? "" : "sudo "
    cmd = "#{precmd}gobjcopy -I ihex " + firmware.path + " -O binary " + TMPDIR + "/" + prestripped_name 
    system("#{cmd} 2>/dev/null 1>/dev/null")
    prestripped_name
  end
  
  def strip(prestripped_name)
    # convert firmware hex file to bin file
    stripped_name = prestripped_name.split('-prestrip').first + ".bin"
    precmd = RUBY_PLATFORM.include?("darwin") ? "" : "sudo "
    cmd = "#{precmd}dd bs=1024 if=" + TMPDIR + "/" + prestripped_name + " of=" + TMPDIR + "/" + stripped_name + " skip=4 count=122"
    system("#{cmd} 2>/dev/null 1>/dev/null")
    stripped_name
  end

  
  def name
    @firmware_name
  end
  
  
  def path
    fetch unless File.exist? @filepath
    raise FirmwareError, "File size mismatch, may be corrupted" unless valid?
    @filepath
  end

  def valid?
    File.size(@filepath) == SIZE
  end
  
end


class ConfigFile
  def initialize(config_file_name)
    @configfilepath = File.expand_path "#{config_file_name}"
    csv_text = File.read(config_file_name)
#    puts csv_text.squeeze("\r\n").gsub(/(\r\n)+/, "\r\n")
    rows = CSV.parse(csv_text.squeeze("\r\n").gsub(/(\r\n)+/, "\r\n")).to_a
    cols = rows.shift
    @confighashed = Array.new
    collection = rows.collect do |row|  
        @confighashed.push(Hash[*cols.zip(row).flatten])
    end 
  end
  
  def path
    @configfilepath
  end
  
  def hashed
    @confighashed
  end
end



class DFUer
  V21_DFU = "aa"
  V20_DFU = "30"
  V32_DFU = "142751fc3e204ffc8c468474f7d9e52b"
  BLUGIGA_DFU = "0001090001"
  NICE_DFU_V2 = "0530303030"
  NICE_DFU_V3 = "05303030303030303000"
  attr_reader :port
  def initialize(port)
    @port = port
  end

  def apply
    if File.exist? port
      [V21_DFU, V20_DFU, BLUGIGA_DFU, V32_DFU, NICE_DFU_V2, NICE_DFU_V3].each do |cmd|
        dfu_cmd(cmd, port)
        sleep 0.5
        return true if dfu_mode?
      end
    end

    return true if dfu_mode?

    sleep 2 # WTF

    dfu_mode?
  end

  private

  def dfu_mode?
    `dfu-util -l`.include? "Found DFU: [2458:fffe]"
  end

  def dfu_cmd(cmd, port)
    `serhex #{port} #{cmd} 2>&1 > /dev/null`
  end
end

class Flasher
  attr_reader :dir, :name
  def initialize(path)
    @dir = File.dirname(path)
    @name = File.basename(path)
  end

  def flash
    # looks like dfu-util has to execute in the same directory as the firmware image
    # try without sudo first, if that fails use sudo.
    Dir.chdir(dir) do |path|
      precmd = RUBY_PLATFORM.include?("darwin") ? "" : "sudo "
      cmd = "#{precmd}dfu-util -d 2458:fffe -D #{name}"

      # using system so we get the output of dfu-util
      print "\033[34m"
      system(cmd)
      print "\033[0m"
    end
    $?.success?
  end
end

class ProgressSpinner
  def self.tick
    @chars ||= %w{| / - \\}
    print "\b#{(@chars.rotate!).last}"
  end
end

################################################################################

require 'optparse'
OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename $0} [options]"
  opts.on("-w", "--watch", "Run forever and watch for new beacons") do
    options.watch = true
  end
  opts.on("-r", "--resume", "Resume on last attempted configuration CSV File entry") do
    options.resume = true
  end
  opts.on("-cCSVFILE[:XX]", "--configure=csvfile[:XX]", "Configuration CSV File (#{options.csvfile})") do |csvfile|
    configInput = csvfile.split(':')
    options.csvfile = configInput[0]
    if (configInput.length == 2)
        options.resumeNumber = configInput[1]
    else
        options.resumeNumber = 1
    end
  end
  opts.on("-pPORT", "--port=port", "Logical Port (#{options.port})") do |port|
    options.port = port
  end
  opts.on("-VVERSION", "--version=VERSION", "Firmware Version (#{options.version})") do |ver|
    options.version = ver
  end
  opts.on("-FFIRMWARE", "--firmware=firmware", "Firmware Name (n/a) - will override any version setting") do |fw|
    options.firmware = fw
  end
end.parse!

# Check for system commands needed by this script
%w{dfu-util serhex}.each do |cmd|
  unless system("which #{cmd} > /dev/null 2>&1")
    STDERR.puts "ERROR: Missing #{cmd} command"
    exit 1
  end
end

def move_cursor_back_one
  print "\f"
end

def wait_for_remove_beacon(port)
  loop do
    # TODO: Refactor so we are not duplicating this util specific code
    break unless `dfu-util -l 2>/dev/null`.include?("Found DFU: [2458:fffe]")
    sleep 0.1
    ProgressSpinner.tick
  end
end

def wait_for_beacon(port)
  loop do
    break if File.exist?(port)
    # If a dongle is stuck in DFU mode, it's ok to flash it.
    break if `dfu-util -l`.include?("Found DFU: [2458:fffe]")
    sleep 0.1
    ProgressSpinner.tick
  end
end

def wait_for_remove_configured_beacon(port)
  loop do
    break unless File.exist?(port)
    sleep 0.1
    ProgressSpinner.tick
  end
end

require 'pathname'
NEXT_SOUND    = Pathname("/System/Library/Sounds/Submarine.aiff")
START_SOUND   = Pathname("/System/Library/Sounds/Purr.aiff")
SUCCESS_SOUND = Pathname("/System/Library/Sounds/Frog.aiff")
FAILURE_SOUND = Pathname("/System/Library/Sounds/Sosumi.aiff")
FINISH_SOUND  = Pathname("/System/Library/Sounds/Glass.aiff")

def play_sound(file)
  `afplay #{file}`
end

def notify_start
  play_sound START_SOUND if START_SOUND.exist?
end

def notify_success
  system "osascript -e 'display notification \"Success\" with title \"RadBeacon Flasher\"'"
  play_sound SUCCESS_SOUND if SUCCESS_SOUND.exist?
  puts
  puts "Success!"
  puts
end

def notify_failure
  play_sound FAILURE_SOUND if FAILURE_SOUND.exist?
  puts
  puts "Failure!"
end


def notifyConfigDetails(hash, file, entry)
    puts
    puts("===================================================================")
    puts("    Config File: " + file)
    puts("    Config Entry: " + entry)
    puts("===================================================================")
    if (hash.key?("name"))
        puts("                   Name: " + hash["name"])
    end
    if (hash.key?("ib-enable"))
        puts("         iBeacon Enable: " + hash["ib-enable"])
    end
    if (hash.key?("ab-enable"))
        puts("       altBeacon Enable: " + hash["ab-enable"])
    end
    if (hash.key?("euid-enable"))
        puts("   Eddystone UID Enable: " + hash["euid-enable"])
    end
    if (hash.key?("eurl-enable"))
        puts("   Eddystone URL Enable: " + hash["eurl-enable"])
    end
    if (hash.key?("ia-uuid") and hash.key?("ia-major") and hash.key?("ia-minor") and hash.key?("ia-power"))
        puts(" iBeacon/AltBeacon Data: " + hash["ia-uuid"].upcase + " " + hash["ia-major"] + " " + hash["ia-minor"] + " " + hash["ia-power"])
    end
    if (hash.key?("euid-namespace") and hash.key?("euid-instance") and hash.key?("euid-power"))
        puts("     Eddystone UID Data: " + hash["euid-namespace"].upcase + " " + hash["euid-instance"] + " " + hash["euid-power"])
    end
    if (hash.key?("eurl-url") and hash.key?("eurl-power"))
        puts("     Eddystone URL Data: " + hash["eurl-url"] + " " + hash["eurl-power"])
    end
    if (hash.key?("rate"))
        puts("                   Rate: " + hash["rate"].upcase)
    end
    if (hash.key?("txpower"))
        puts("               TX Power: " + hash["txpower"].upcase)
    end
    if (hash.key?("pin"))
        puts("                    PIN: " + hash["pin"].upcase)
    end
    puts("===================================================================")
end


def flash(binary, port)
  puts
  puts
  puts "WARNING: #{port} does not exist" unless File.exist? port
  puts "Using firmware #{binary.path}"
  puts "Going into DFU mode..."
  dfu = DFUer.new port
  notify_start

  if (dfu.apply)
    puts
    puts "DFU Success, flashing...\n\n"
    flasher = Flasher.new(binary.path)
    if flasher.flash
      puts
      return true
    else
      notify_failure
      return false
    end
  else
    notify_failure
    return false
  end
end


def encodeurl(url)

  
  schemes = [
    "http://www.",
    "https://www.",
    "http://",
    "https://",
    ]

  extensions = [
    ".com/", ".org/", ".edu/", ".net/", ".info/", ".biz/", ".gov/",
    ".com", ".org", ".edu", ".net", ".info", ".biz", ".gov",
  ]
  
  data = ""
  
  s = 0
  i = 0
  e = 0
  l = 0
  for scheme in schemes
    if url.start_with?(scheme)
      data = "%02X" % s
      i += scheme.length
      break
    end
    s += 1
  end
  
  if s == scheme.length
    puts "ERROR: Invalid Eddystone URL scheme"
    exit
  end
  
  while i < url.length
    if url[i] == '.'
      for expansion in extensions
        if url[i..-1].start_with?(expansion)
          data << "%02X" % e
          i += expansion.length
          break
        end
        e += 1
      end
      if url[i] == '.'
        data << "2E"
        i += 1
      end
    else
      data << "%02X" % url[i].ord
      i += 1
    end
    l += 1
  end
  
  if l > 18
    puts "ERROR: Invalid Eddystone URL length #{l}"
    exit
  end
  
  return data
end

def getTxPowerSetting(db)

  settings = {"-23"=>0,"-21"=>1,"-20"=>2,"-18"=>3,"-16"=>4,"-14"=>5,"-12"=>6,"-11"=>7,"-8"=>8,"-7"=>9,"-5"=>10,"-4"=>11,"-2"=>12,"-1"=>13,"+0"=>14,"+3"=>15,"0"=>14,"3"=>15}
  if settings.key?(db)
    return settings[db]
  else
    puts "ERROR: #{db} is not a valid tx power value"
    exit
  end
end
  
  
def configure(hash, port)
  puts "WARNING: #{port} does not exist" unless File.exist? port
  
  cmdstatus = true
  precmd = RUBY_PLATFORM.include?("darwin") ? "" : "sudo "
  
    # configure name
    if (cmdstatus and hash.key?("name"))
        name = hash["name"]
        cmd = "#{precmd}rbcom -P00000000 name '#{name}'"
        #puts cmd
        print("         Configure Name: ")
        cmdstatus = system("#{cmd}")
    end
    
    # configure modes
    if (cmdstatus and hash.key?("ib-enable") and hash.key?("ab-enable") and hash.key?("euid-enable") and hash.key?("eurl-enable"))
        modes = 0
        if (hash["ib-enable"].to_i > 0)
            modes += 1
        end
        if (hash["ab-enable"].to_i > 0)
            modes += 2
        end
        if (hash["euid-enable"].to_i > 0)
            modes += 4
        end
        if (hash["eurl-enable"].to_i > 0)
            modes += 8
        end
        cmd = "#{precmd}rbcom -P00000000 bctype #{modes}"
        #puts cmd
        print("        Configure Modes: ")
        cmdstatus = system("#{cmd}")
    end
    
    # configure ibeacon frame
    if (cmdstatus and hash.key?("ia-uuid") and hash.key?("ia-major") and hash.key?("ia-minor") and hash.key?("ia-power"))
        prefix = "0201061aff4c000215"
        postfix = "00"
        frame = prefix + hash["ia-uuid"].tr('-', '') + "%04X"%hash["ia-major"] + "%04X"%hash["ia-minor"] + "%02X"%(256 + hash["ia-power"].to_i) + postfix
        cmd = "#{precmd}rbcom -P00000000 frame0 #{frame}"
        #puts cmd
        print("      Configure iBeacon: ")
        cmdstatus = system("#{cmd}")
    end
    
     # configure altbeacon frame
    if (cmdstatus and hash.key?("ia-uuid") and hash.key?("ia-major") and hash.key?("ia-minor") and hash.key?("ia-power"))
        prefix = "0201061bff1801beac"
        postfix = "00"
        frame = prefix + hash["ia-uuid"].tr('-', '') + "%04X"%hash["ia-major"] + "%04X"%hash["ia-minor"] + "%02X"%(256 + hash["ia-power"].to_i) + postfix
        cmd = "#{precmd}rbcom -P00000000 frame1 #{frame}"
        #puts cmd
        print("    Configure AltBeacon: ")
        cmdstatus = system("#{cmd}")
    end
    
    # configure eddystone uid frame
    if (cmdstatus and hash.key?("euid-namespace") and hash.key?("euid-instance") and hash.key?("euid-power"))
        prefix = "0201060303aafe1716aafe00"
        postfix = "0000"
        frame = prefix + "%02X"%(256 + hash["euid-power"].to_i) + hash["euid-namespace"] + hash["euid-instance"] + postfix
        cmd = "#{precmd}rbcom -P00000000 frame2 #{frame}"
        #puts cmd
        print("Configure Eddystone UID: ")
        cmdstatus = system("#{cmd}")
    end
    
    # configure eddystone url frame
    if (cmdstatus and hash.key?("eurl-url") and hash.key?("eurl-power"))
        urldata = encodeurl(hash["eurl-url"])
        pdulength = '%02X' % ( urldata.length/2 + 5 )
        padding = "00000000000000000000000000000000000000"
        prefix = "0201060303aafe#{pdulength}16aafe10"
        postfix = padding[0,padding.length - urldata.length - 2]
        frame = prefix + "%02X"%(256 + hash["eurl-power"].to_i) + urldata + postfix
        cmd = "#{precmd}rbcom -P00000000 frame3 #{frame}"
        #puts cmd
        print("Configure Eddystone URL: ")
        cmdstatus = system("#{cmd}")
    end
    
    # configure rate
    if (cmdstatus and hash.key?("rate"))
        rate = hash["rate"].to_i * 10
        cmd = "#{precmd}rbcom -P00000000 advrate #{rate}"
        #puts cmd
        print("         Configure Rate: ")
        cmdstatus = system("#{cmd}")
    end
    
    # configure txpower
    if (cmdstatus and hash.key?("txpower"))
        txpower = getTxPowerSetting(hash["txpower"])
        cmd = "#{precmd}rbcom -P00000000 txpwr #{txpower}"
        #puts cmd
        print("     Configure TX Power: ")
        cmdstatus = system("#{cmd}")
    end
    
    # configure pin
    if (cmdstatus and hash.key?("pin"))
        pin = hash["pin"]
        cmd = "#{precmd}rbcom -P00000000 chgpin #{pin}"
        #puts cmd
        print("          Configure PIN: ")
        cmdstatus = system("#{cmd}")
    end
    
    return cmdstatus
    
end


trap(:INT) do
  puts "\n\n    kthxbye"
  exit 0
end


# main

firmware_file_name = options.firmware || "#{FirmwareFile::DEFAULT_PREFIX}#{options.version}"
firmwarefile = FirmwareFile.new(firmware_file_name)
    
if options.csvfile
  if options.resume
    options.resumeNumber = File.read('./resume.txt')
  end
  puts("resumeNumber from file " + options.resumeNumber)
  resumeNumber = options.resumeNumber.to_i
  if (resumeNumber < 1)
    resumeNumber = 1
  end
  configfile = ConfigFile.new(options.csvfile)
  configfile.hashed.each_index do |i|
    if (i == resumeNumber - 1)
        loop do
          system("clear")
          puts
          print "Please insert beacon to flash (ctrl-c to cancel)  "
          play_sound NEXT_SOUND if NEXT_SOUND.exist?
          wait_for_beacon(options.port)
      
          binary = BinaryFile.new(firmwarefile)
          break if (flash(binary, options.port))
      
          puts
          puts "Press ENTER to restart (ctrl-c to cancel)  "
          input = gets
        end
      
        play_sound NEXT_SOUND if NEXT_SOUND.exist?
    
        print "Please REMOVE AND REINSERT BEACON to configure (ctrl-c to cancel)  "
        wait_for_remove_beacon(options.port)
        wait_for_beacon(options.port)
    
        hash = configfile.hashed[i]
        notifyConfigDetails(hash, options.csvfile, resumeNumber.to_s)
        play_sound START_SOUND if START_SOUND.exist?
 
        status = configure(hash, options.port)
        if (status)
          play_sound FINISH_SOUND if FINISH_SOUND.exist?
          puts
          print "SUCCESS! Please remove configured beacon (ctrl-c to cancel)  "
          wait_for_remove_configured_beacon(options.port)
          puts
          puts
          puts "Press ENTER to continue to next beacon  (ctrl-c to cancel)  "
          input = gets
          resumeNumber += 1
          File.open('./resume.txt', 'w') { |file| file.write(resumeNumber) }
        else
          play_sound FINISH_SOUND if FINISH_SOUND.exist?
          puts
          print "FAILED! Please remove beacon and check CSV for invalid values "
          wait_for_remove_configured_beacon(options.port)
          puts
          puts
          exit
        end
    end
  end
  play_sound NEXT_SOUND if NEXT_SOUND.exist?
else if options.watch
  loop do
    puts
    print "Please insert beacon (ctrl-c to cancel)  "
    play_sound NEXT_SOUND if NEXT_SOUND.exist?
    wait_for_beacon(options.port)
    binary = BinaryFile.new(firmwarefile)
    flash(binary, options.port)
    print "Please remove beacon (ctrl-c to cancel)  "
    wait_for_remove_beacon options.port
  end
  play_sound NEXT_SOUND if NEXT_SOUND.exist?
else
  puts
  print "Please insert beacon (ctrl-c to cancel)  "
  play_sound NEXT_SOUND if NEXT_SOUND.exist?
  wait_for_beacon(options.port)
  binary = BinaryFile.new(firmwarefile)
  flash(binary, options.port)
  print "Please remove beacon (ctrl-c to cancel)  "
  wait_for_remove_beacon options.port
  puts
end

end
